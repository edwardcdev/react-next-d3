#!/usr/bin/env node

"use strict";

const http = require("http");
const https = require("https");
const path = require("path");
const fs = require("fs-extra");
const App = require("../src/App");

const root = path.join.bind(path, path.resolve(__dirname), "..");
process.chdir(root());

let app = new App();

let mainServer;
if (app.config.apiSslKey && app.config.apiSslCert) {
  let key =
    app.config.apiSslKey[0] === "/"
      ? app.config.apiSslKey
      : path.join(__dirname, "..", app.config.apiSslKey);
  let cert =
    app.config.apiSslCert[0] === "/"
      ? app.config.apiSslCert
      : path.join(__dirname, "..", app.config.apiSslCert);
  let options = {
    key: fs.readFileSync(key),
    cert: fs.readFileSync(cert)
  };
  if (app.config.apiSslCa) {
    let ca =
      app.config.apiSslCa[0] === "/"
        ? app.config.apiSslCa
        : path.join(__dirname, "..", app.config.apiSslCa);
    options.ca = fs.readFileSync(ca);
  }
  mainServer = https.createServer(options, app.express);
} else {
  mainServer = http.createServer(app.express);
}

app
  .init({ mainServer })
  .then(() => {
    mainServer.listen(app.config.apiPort, app.config.apiHost);
    mainServer.on("error", onError);
    mainServer.on("listening", onMainListening);
  })
  .catch(error => {
    console.error(error);
    process.exit(1);
  });

/**
 * Event listener for HTTP server "error" event.
 * @param {Error} error
 */
function onError(error) {
  if (error.syscall !== "listen") throw error;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(`Port ${app.config.apiPort} requires elevated privileges`);
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(`Port ${app.config.apiPort} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onMainListening() {
  let address = mainServer.address();
  console.log(`> Server is listening on ${address.address}:${address.port}`);
  console.log(`> Serving ${app.config.apiOrigins.join(", ")}`);
}
